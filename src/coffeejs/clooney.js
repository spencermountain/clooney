// Generated by CoffeeScript 1.6.3
define(function(require, exports, module) {
  var Bar, ContainerSurface, Easing, Engine, EventHandler, Graph, GridLayout, HeaderFooterLayout, ImageSurface, Modifier, RenderController, RenderNode, Scrollview, SequentialLayout, SpringTransition, Surface, Timer, Transform, Transitionable, View, WallTransition, spring_transition, wall_transition;
  Engine = require("famous/core/Engine");
  Transform = require("famous/core/Transform");
  Modifier = require("famous/core/Modifier");
  Surface = require("famous/core/Surface");
  ContainerSurface = require("famous/surfaces/ContainerSurface");
  Transitionable = require("famous/transitions/Transitionable");
  ImageSurface = require("famous/surfaces/ImageSurface");
  Easing = require("famous/transitions/Easing");
  GridLayout = require("famous/views/GridLayout");
  Scrollview = require("famous/views/Scrollview");
  Timer = require("famous/utilities/Timer");
  RenderNode = require("famous/core/RenderNode");
  EventHandler = require('famous/core/EventHandler');
  HeaderFooterLayout = require("famous/views/HeaderFooterLayout");
  RenderController = require("famous/views/RenderController");
  SequentialLayout = require("famous/views/SequentialLayout");
  View = require('famous/core/View');
  SpringTransition = require('famous/transitions/SpringTransition');
  WallTransition = require('famous/transitions/WallTransition');
  Transitionable.registerMethod('spring', SpringTransition);
  Transitionable.registerMethod('wall', WallTransition);
  window.mainContext = Engine.createContext();
  window.eventHandler = new EventHandler();
  wall_transition = {
    method: 'wall',
    period: 450,
    dampingRatio: 0.7
  };
  spring_transition = {
    method: 'spring',
    period: 450,
    dampingRatio: 0.7
  };
  Bar = (function() {
    function Bar(options) {
      var s;
      if (options == null) {
        options = {};
      }
      this.d = options.d || {
        value: 0,
        label: ""
      };
      this.i = options.i;
      this.graph = options.graph;
      this.x = Math.random() * 100;
      this.y = Math.random() * 100;
      this.compute();
      s = new Surface({
        size: [void 0, void 0],
        content: this.d.value || '',
        properties: {
          backgroundColor: "steelblue",
          border: "0.5px solid white",
          textAlign: "center",
          color: "white",
          "font-size": "10px"
        }
      });
      this.mod = new Modifier({
        origin: [0, 1],
        transform: Transform.translate(this.x, this.y),
        size: [0.1, 0.1],
        opacity: 0.8
      });
      this.graph.node.add(this.mod).add(s);
      this.mod.setSize([this.w, this.h], wall_transition);
    }

    Bar.prototype.compute = function() {
      var the;
      the = this;
      if (this.graph.type === "vertical_bar") {
        this.y = 0;
        this.h = this.graph.y_scale.linear(the.d.value);
        this.x = this.graph.x_scale.linear(the.i);
        this.w = this.graph.x_scale.linear(1) - 1;
      } else if (this.graph.type === "horizontal_bar") {
        this.x = 0;
        this.y = -this.graph.y_scale.linear(the.i);
        this.h = this.graph.y_scale.linear(1) - 1;
        this.w = this.graph.x_scale.linear(the.d.value);
      }
      return console.log(this.h);
    };

    Bar.prototype.show = function() {
      var the;
      the = this;
      the.mod.setSize([the.w, the.h], wall_transition);
      return the.mod.setTransform(Transform.translate(the.x, the.y), wall_transition);
    };

    return Bar;

  })();
  Graph = (function() {
    var the;

    the = Graph;

    function Graph(options) {
      if (options == null) {
        options = {};
      }
      this.data = options.data || [];
      this.width = options.width || 400;
      this.height = options.height || 400;
      this.bars = [];
      this.type = options.type || "vertical_bar";
      this.compute();
      this.node = new ContainerSurface({
        size: [this.width, this.height],
        properties: {
          overflow: "hidden",
          border: "1px solid steelblue",
          "border-radius": "2px"
        }
      });
      this.bars = this.data.map(function(d, i) {
        return new Bar({
          graph: the,
          d: d,
          i: i
        });
      });
      this.show();
    }

    Graph.prototype.update = function(options) {
      this.data = options.data || this.data;
      this.width = options.width || this.width;
      this.height = options.height || this.height;
      this.type = options.type || this.type;
      this.compute();
      return this.show();
    };

    Graph.prototype.compute = function() {
      var max, values;
      the = this;
      values = the.data.map(function(d) {
        return d.value;
      });
      max = Math.max.apply(Math, values);
      if (the.type === "vertical_bar") {
        the.x_scale = new Scale({
          size: [0, the.width],
          range: [0, the.data.length]
        });
        the.y_scale = new Scale({
          size: [0, the.height],
          range: [0, max]
        });
      } else if (the.type === "horizontal_bar") {
        the.x_scale = new Scale({
          size: [0, the.width],
          range: [0, max]
        });
        the.y_scale = new Scale({
          size: [0, the.height],
          range: [0, the.data.length]
        });
      }
      return this.bars.forEach(function(bar, i) {
        bar.d = the.data[i];
        return bar.compute();
      });
    };

    Graph.prototype.build = function() {
      return this.node;
    };

    Graph.prototype.show = function() {
      return this.bars.forEach(function(bar) {
        return bar.show();
      });
    };

    return Graph;

  })();
  return module.exports = Graph;
});
